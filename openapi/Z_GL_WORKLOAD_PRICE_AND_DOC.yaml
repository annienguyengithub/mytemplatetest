openapi: 3.0.3
servers:
  - url: 'https://d2l00437g.dc02.its.hpecorp.net:44300/sap/opu/odata/sap/Z_GL_WORKLOAD_PRICE_AND_DOC_SRV/'
info:
  description: >-
    This is a sample server GL_WorkLoad_Plan server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 1.0.0
  title: Z_GL_WORKLOAD_PRICE_AND_DOC_Title
  termsOfService: 'https://d2l00437g.dc02.its.hpecorp.net:44300/sap/opu/odata/sap/Z_GL_WORKLOAD_PRICE_AND_DOC_SRV/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'https://d2l00437g.dc02.its.hpecorp.net:44300/sap/opu/odata/sap/Z_GL_WORKLOAD_PRICE_AND_DOC_SRV/'
tags:
  - name: Workload
    description: Everything about your Workloads
    externalDocs:
      description: Find out more
      url: 'https://d2l00437g.dc02.its.hpecorp.net:44300/sap/opu/odata/sap/Z_GL_WORKLOAD_PRICE_AND_DOC_SRV/'
  - name: store
    description: Access to GL_WorkLoad_Plan orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'https://d2l00437g.dc02.its.hpecorp.net:44300/sap/opu/odata/sap/Z_GL_WORKLOAD_PRICE_AND_DOC_SRV/'
paths:
  /Workload:
    post:
      tags:
        - Workload
      summary: Add a new Workload to the store
      description: ''
      operationId: addWorkload
      responses:
        '200':
          description: OK
        '405':
          description: Invalid input
      security:
        - GL_WorkLoad_Price_and_Doc_Auth:
            - 'write:Workloads'
            - 'read:Workloads'
      requestBody:
        $ref: '#/components/requestBodies/Workload'
    put:
      tags:
        - Workload
      summary: Update an existing Workload
      description: ''
      operationId: updateWorkload
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Workload not found
        '405':
          description: Validation exception
      security:
        - GL_WorkLoad_Price_and_Doc_Auth:
            - 'write:Workloads'
            - 'read:Workloads'
      requestBody:
        $ref: '#/components/requestBodies/Workload'
  /Workload/findByStatus:
    get:
      tags:
        - Workload
      summary: Finds Workloads by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findWorkloadsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workload'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workload'
        '400':
          description: Invalid status value
      security:
        - GL_WorkLoad_Price_and_Doc_Auth:
            - 'write:Workloads'
            - 'read:Workloads'
  /Workload/findByTags:
    get:
      tags:
        - Workload
      summary: Finds Workloads by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findWorkloadsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          $ref: "#/components/responses/WorkloadResponse"
        '400':
          description: Invalid tag value
      security:
        - GL_WorkLoad_Price_and_Doc_Auth:
            - 'write:Workloads'
            - 'read:Workloads'
      deprecated: true
  '/Workload/{WorkloadId}':
    get:
      tags:
        - Workload
      summary: Find Workload by ID
      description: Returns a single Workload
      operationId: getWorkloadById
      parameters:
        - name: WorkloadId
          in: path
          description: ID of Workload to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Workload'
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
        '400':
          description: Invalid ID supplied
        '404':
          description: Workload not found
      security:
        - api_key: []
    post:
      tags:
        - Workload
      summary: Updates a Workload in the store with form data
      description: ''
      operationId: updateWorkloadWithForm
      parameters:
        - name: WorkloadId
          in: path
          description: ID of Workload that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '405':
          description: Invalid input
      security:
        - GL_WorkLoad_Price_and_Doc_Auth:
            - 'write:Workloads'
            - 'read:Workloads'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the Workload
                  type: string
                status:
                  description: Updated status of the Workload
                  type: string
    delete:
      tags:
        - Workload
      summary: Deletes a Workload
      description: ''
      operationId: deleteWorkload
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: WorkloadId
          in: path
          description: Workload id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Workload not found
      security:
        - GL_WorkLoad_Price_and_Doc_Auth:
            - 'write:Workloads'
            - 'read:Workloads'
  '/Workload/{WorkloadId}/uploadImage':
    post:
      tags:
        - Workload
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: WorkloadId
          in: path
          description: ID of Workload to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - GL_WorkLoad_Price_and_Doc_Auth:
            - 'write:Workloads'
            - 'read:Workloads'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  description: Additional data to pass to server
                  type: string
                file:
                  description: file to upload
                  type: string
                  format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns Workload inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a Workload
      description: ''
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the Workload
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of Workload that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value. Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  responses:
    WorkloadResponse:
      description: successful operation
      content:
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Workload'
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Workload'
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Workload:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Workload'
        application/xml:
          schema:
            $ref: '#/components/schemas/Workload'
      description: Workload object that needs to be added to the store
      required: true
  securitySchemes:
    GL_WorkLoad_Price_and_Doc_Auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://sap/opu/odata/sap/Z_GL_WORKLOAD_PRICE_AND_DOC_SRV/?$format=xml'
          scopes:
            'write:Workloads': modify Workloads in your account
            'read:Workloads': read your Workloads
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        WorkloadId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Workload:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Workload status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Workload
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
